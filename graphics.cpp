#include "graphics.h"

#include "globals.h"
// using  map_width() and map_height() functions from #include "map.h"
#include "map.h"

/*
In this file put all your graphical functions (don't forget to declare them first
in graphics.h). So when you want to draw something use this file. One cool function
to look at would be uLCD.blit() there are more like filled_rectangle etc... 
https://os.mbed.com/users/4180_1/notebook/ulcd-144-g2-128-by-128-color-lcd/
This website is a good resource.
*/

void draw_player(int u, int v, int key)
{
    //uLCD.filled_rectangle(u, v, u+11, v+11, RED);
    const char* sprite = "WWWW111WWWWRRW14181WWWRRW11111WWWW1WW151W1WWW1528LY61WWWW56PRY25WWWWW269965WWWWWL2R825WWWWWW111W1WWWWWW1W1W1WWWWWW111WWWW";
    draw_img(u, v, sprite);
}

#define RED    0xFF0000
#define YELLOW 0xFFD700
#define BROWN  0xD2691E
#define DIRT   BROWN
#define GREEN  0x00FF00
#define LGRAY 0xD8D5D5
#define DGRAY 0xB4B3B3
//---------------------------------------
#define CELADON 0xAFE1AF
#define OFFWHITE_BACKGROUND 0xEAEEEF // W
#define BLACK 0x000000 // black: 1
#define MDBLUE 0x32567E // mid dark blue: 2
#define LIGHTBLUE 0x5C8A9D // light blue: L
#define DBROWN 0x8E5922 // dark brown: 4 (left eye)
#define VDGRAY 0x78807A  // very dark gray: 5
#define VDBLUE 0x2B3A87 // very darker blue: 6
#define DGREEN 0x7B7D0B // dark green: 7
#define DBROWNGREEN 0x75671D // dark brown green: 8 (right eye) + other parts of the body
#define DTEAL 0x4F7058 // dark teal: 9
#define DPURPLE 0x6C426E // dark purple: P
#define DORANGE 0xECA431 // dark orange: O
#define GRASSDG 0x357E2D // Grass dark green: A
#define GRASSLG 0x2BA91D // Grass light green: B
#define SKYBLUE 0x8DADB2 // Sky blue: S
#define DESKBROWN 0xA38565 // Poseidon's brown desk: C ~ light brown color
#define DYELLOW  0xF6BE00 // Dark Yellow: E
#define BRICKGRAY 0x626262 // Gray used within the eBricks of the Marta Train Station: F

void draw_img(int u, int v, const char* img)
{
    int colors[11*11];
    for (int i = 0; i < 11*11; i++)
    {
        if (img[i] == 'R') colors[i] = RED;
        else if (img[i] == 'Y') colors[i] = YELLOW;
        else if (img[i] == 'G') colors[i] = GREEN;
        else if (img[i] == 'D') colors[i] = DIRT;
        else if (img[i] == 'I') colors[i] = LGREY;
        else if (img[i] == '3') colors[i] = DGREY;
        else if (img[i] == 'W') colors[i] = OFFWHITE_BACKGROUND;
        else if (img[i] == '2') colors[i] = MDBLUE;
        else if (img[i] == 'L') colors[i] = LIGHTBLUE;
        
        else if (img[i] == '4') colors[i] = DBROWN;
        else if (img[i] == '5') colors[i] = VDGRAY;
        else if (img[i] == '6') colors[i] = VDBLUE;
        else if (img[i] == '7') colors[i] = DGREEN;
        else if (img[i] == '8') colors[i] = DBROWNGREEN;
        else if (img[i] == '9') colors[i] = DTEAL;
        else if (img[i] == 'P') colors[i] = DPURPLE;
        else if (img[i] == 'O') colors[i] = DORANGE; 
        else if (img[i] == 'A') colors[i] = GRASSDG; 
        else if (img[i] == 'B') colors[i] = GRASSLG; 
        else if (img[i] == 'S') colors[i] = SKYBLUE;
        else if (img[i] == 'C') colors[i] = DESKBROWN;
        else if (img[i] == 'E') colors[i] = DYELLOW;
        else if (img[i] == 'F') colors[i] = BRICKGRAY;
        
         
         
        else colors[i] = BLACK;
    }
    uLCD.BLIT(u, v, 11, 11, colors);
    wait_us(250); // Recovery time!
}
//******************************************************************************


/*
void draw_img(int u, int v, const char* img)
{
    int colors[11*11];
    for (int i = 0; i < 11*11; i++)
    {
        if (img[i] == 'R') colors[i] = RED;
        else if (img[i] == 'Y') colors[i] = YELLOW;
        else if (img[i] == 'G') colors[i] = GREEN;
        else if (img[i] == 'D') colors[i] = DIRT;
        else if (img[i] == 'I') colors[i] = LGREY;
        else if (img[i] == '3') colors[i] = DGREY;
        else if (img[i] == 'W') colors[i] = OFFWHITE_BACKGROUND;
        else if (img[i] == '2') colors[i] = MDBLUE;
        else if (img[i] == 'L') colors[i] = LIGHTBLUE;
        
        else if (img[i] == '4') colors[i] = DBROWN;
        else if (img[i] == '5') colors[i] = VDGRAY;
        else if (img[i] == '6') colors[i] = VDBLUE;
        else if (img[i] == '7') colors[i] = DGREEN;
        else if (img[i] == '8') colors[i] = DBROWNGREEN;
        else if (img[i] == '9') colors[i] = DTEAL;
        else if (img[i] == 'P') colors[i] = DPURPLE;
        else if (img[i] == 'O') colors[i] = DORANGE; 
        else if (img[i] == 'A') colors[i] = GRASSDG; 
        else if (img[i] == 'B') colors[i] = GRASSLG; 
        else if (img[i] == 'S') colors[i] = SKYBLUE;
        else if (img[i] == 'C') colors[i] = DESKBROWN;
        else if (img[i] == 'E') colors[i] = DYELLOW;
        else if (img[i] == 'F') colors[i] = BRICKGRAY;
        
         
         
        else colors[i] = BLACK;
    }
    uLCD.BLIT(u, v, 11, 11, colors);
    wait_us(250); // Recovery time!
}

*/




//******************************************************************************
/*======================
    Drawing Functions 
    ------------------
    ~ These functions contain a draw_img function, which draws an 11x11 pixcel 
    image (sprites) created through Piskel.com

*/

void draw_nothing(int u, int v)
{
    // Fill a tile with blackness
    uLCD.filled_rectangle(u, v, u+10, v+10, BLACK);
}

void draw_pavement(int u, int v)
{
    const char* pavement = "IIIIFIIIIIIIIIIFIIIIIIIIIIFIIIFFFFFFFFIIIFIIIIFIIIIIFIIIIFIIIIIFIIIIFIIIIIFIIIIFFFFFFFFFIIIIIIFIIIIIIIIIIFIIIIIIIIIIFIIII";
    draw_img(u,v, pavement);
}


void draw_wall(int u, int v)
{
    //uLCD.filled_rectangle(u, v, u+10, v+10, BROWN);
    const char* wall = "7755555755557557557755555575577755557755557757775555557555775575555555777755577555557755577755557755555755557555557555575";
    draw_img(u,v, wall);
}
void draw_grass(int u, int v)
{
    const char* grass = "AABAAABAAABABBAABBAABBBBAABBAABBABAAABAAABAABAAABAAABAAAAAAAAAAAAABAAABAAABAABBAABBAABBAABBAABBAABBAABAAABAAABAABAAABAAAB";
    draw_img(u,v, grass);
    
}

void draw_tree(int u, int v) 
{
    const char* tree = "1111777111111777777711177777777717777777777711714441711747444447117171444477111714441171111144411711114444411144444444444";
    draw_img(u,v, tree);
}

void draw_limboTree(int u, int v) 
{
    const char* tree = "1111333111111333333311133333333313333333333311314441311343444443113131444433111314441131111144411311114444411144444444444";
    draw_img(u,v, tree);
}
void draw_goldenTree(int u, int v)
{
    const char* tree = "1111EEE111111EEEEEEE111EEEEEEEEE1EEEEEEEEEEE11E14441E11E4E44444E11E1E14444EE111E144411E1111144411E11114444411144444444444";
    draw_img(u,v, tree);
}


void draw_plant(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, GREEN);
}


void draw_fullHealth(int u, int v)
{
    const char* health = "FFFFFFFFFFFFOOOOOOOO0FFOOOOOOOOOFFOOOOOOOOOFFOOOOOOOOOFFOOOOOOOOOFFOOOOOOOOOFFOOOOOOOOOFFOOOOOOOOOFFOOOOOOOOOFFFFFFFFFFFF";
    draw_img(u,v, health);
}
void draw_twoThirds_Health(int u, int v)
{
    const char* health = "FFFFFFFFFFFF111111111FF111111111FF111111111FFOOOOOOOOOFFOOOOOOOOOFFOOOOOOOOOFFOOOOOOOOOFFOOOOOOOOOFFOOOOOOOOOFFFFFFFFFFFF";
    draw_img(u,v, health);
}
void draw_oneThird_Health(int u, int v)
{
    const char* health = "FFFFFFFFFFFF111111111FF111111111FF111111111FF111111111FF111111111FF111111111FFOOOOOOOOOFFOOOOOOOOOFFOOOOOOOOOFFFFFFFFFFFF";
    draw_img(u,v, health);
}


void draw_darkYELLOW(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, DYELLOW);
}
//==========================================================================================
//------------------------------------------------------------------------------------------
//                                  LIMBO
//------------------------------------------------------------------------------------------
//==========================================================================================



//----------------------------------
//              Portals
//----------------------------------

void draw_homePortal(int u, int v)
{
    const char* homePortal = "111155511111555555555115IIIIIII5115ILLLLLI5155ILLLLLI5555ILLLLLI5555ILLLLLI5515ILLLLLI5115IIIIIII511555555555111115551111";
    draw_img(u,v, homePortal);
}


void draw_martaPortal(int u, int v)
{
    const char* martaPortal = "111155511111555555555115IIIIIII5115I88888I5155I88888I5555I88888I5555I88888I5515I88888I5115IIIIIII511555555555111115551111";
    draw_img(u,v, martaPortal);
}

void draw_posiedonPortal(int u, int v)
{
    const char* martaPortal = "111155511111555555555115IIIIIII5115I99999I5155I99999I5555I99999I5555I99999I5515I99999I5115IIIIIII511555555555111115551111";
    draw_img(u,v, martaPortal);
}

void draw_LIMBO_OLYMPUS_PORTAL(int u, int v)
{
    const char* martaPortal = "111155511111555555555115IIIIIII5115IEEEEEI5155IEEEEEI5555IEEEEEI5555IEEEEEI5515IEEEEEI5115IIIIIII511555555555111115551111";
    draw_img(u,v, martaPortal);
}

void draw_ATL_OLYMPUS_PORTAL(int u, int v)
{
    const char* martaPortal = "111155511111555555555115IIIIIII5115IOOOOOI5155IOOOOOI5555IOOOOOI5555IOOOOOI5515IOOOOOI5115IIIIIII511555555555111115551111";
    draw_img(u,v, martaPortal);
}

//==========================================================================================
//------------------------------------------------------------------------------------------
//                                  MARTA
//------------------------------------------------------------------------------------------
//==========================================================================================


void draw_trainMidSection(int u, int v)
{
    const char* trainMidSection = "11111111111222222222222222222222222222222222EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO";
    draw_img(u,v, trainMidSection);
}
void draw_trainBottomSection(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, DGREY);
}

//==========================================================================================
//------------------------------------------------------------------------------------------
//                      Posiedon's Room
//------------------------------------------------------------------------------------------
//==========================================================================================
void draw_redSheets(int u, int v)
{
    //pc.printf("[U, V]:  [%d, %d]\n", u, v);
    uLCD.filled_rectangle(u, v, u+10, v+10, RED);
}

void draw_WHITE(int u, int v)
{
    //pc.printf("[U, V]:  [%d, %d]\n", u, v);
    uLCD.filled_rectangle(u, v, u+10, v+10, OFFWHITE_BACKGROUND);
}

void draw_desk(int u, int v)
{
    //pc.printf("[U, V]:  [%d, %d]\n", u, v);
    uLCD.filled_rectangle(u, v, u+10, v+10, DESKBROWN);
}
void draw_water(int u, int v)
{
    //pc.printf("Printing Water\n __________________\n");
    //pc.printf("[U, V]:  [%d, %d]\n", u, v);
    // raw code in wave.c
    for(int i = 0; i< (map_width()-2); i++)
    {
        const char* water = "22222LLLLL22222L22222L222L222222L22L222L22L222L22L22L222L22L22L2222L2L22L2222L22L22LL222L2222222L22L22222222L2LLLLLLLLLL2";
        draw_img(u,v, water);
    }
    //uLCD.filled_rectangle(u, v, u+10, v+10, LIGHTBLUE);
}
// Draw Potions function
//-------------------------

void draw_DTealPotion(int u, int v)
{
    const char* DTealPotion = "CCC44444CCCCCWW444WWCCCCWW444WWCCCCCW999WCCCCCCW999WCCCCCW99999WCCCW99W9999WCCW9W99999WCCW99W9999WCCCW99999WCCCCCWWWWWCCC";
    draw_img(u,v, DTealPotion);
}
void draw_DBluePotion(int u, int v)
{
    const char* DBluePotion = "CCC44444CCCCCWW444WWCCCCWW444WWCCCCCW222WCCCCCCW222WCCCCCW22222WCCCW22W2222WCCW2W22222WCCW22W2222WCCCW22222WCCCCCWWWWWCCC";
    draw_img(u,v, DBluePotion);
}
void draw_DPurplePotion(int u, int v)
{
    const char* DPurplePotion = "CCC44444CCCCCWW444WWCCCCWW444WWCCCCCWPPPWCCCCCCWPPPWCCCCCWPPPPPWCCCWPPWPPPPWCCWPWPPPPPWCCWPPWPPPPWCCCWPPPPPWCCCCCWWWWWCCC";
    draw_img(u,v, DPurplePotion);
}
void draw_DOrangePotion(int u, int v)
{
    const char* main_portal = "CCC44444CCCCCWW444WWCCCCWW444WWCCCCCWOOOWCCCCCCWOOOWCCCCCWOOOOOWCCCWOOWOOOOWCCWOWOOOOOWCCWOOWOOOOWCCCWOOOOOWCCCCCWWWWWCCC";
    draw_img(u,v, main_portal);
}


//==============================================================================
//------------------------------------------------------------------------------
//                            Pencil Building 
//------------------------------------------------------------------------------ 
//==============================================================================
/*
Generic Color Blocks
---------------------
void draw_brown(int u, int v);
void draw_darkblueBlock(int u, int v);
void draw_yellowBlock(int u, int v);
*/

/*
Fundamental Pieces of the Triangular Grid
------------------------------------------
~ leftGrid: [CENTRAL Diagnoal Line from BOTTOM LEFT -> TOP RIGHT] 
            + [Points Driectly to the Right and Below the CENTRAL Diagnoal Line from BOTTOM RIGHT -> CENTER of 11x11 pixcel grid]
~ add decriptions of the grids too


LOCATION: above the Pencibulidings primary structure 
(series of Add_building blocks in add_PencilBuilding(int x, int y)) 
-> (depicted as Large Rectangle the Brown bricks and dark blue windows)
*/
void draw_leftGrid(int u, int v)
{
    const char* leftGrid = "1111111111411111111141111111114111111111411111111141111111114411111111441411111141141411114111141411411111141441111111141";
    draw_img(u,v, leftGrid);
}
void draw_centerGrid(int u, int v)
{
    const char* centerGrid = "1411111114141411111414141411141411141414141111141414111111141411111114141411111414141411141411141414141111141414111111141";
    draw_img(u,v, centerGrid);
}
void draw_rightGrid(int u, int v)
{
    const char* rightGrid = "4111111111114111111111114111111111114111111111114111111111144111111114144111111414114111141411114114141111114114111111114";
    draw_img(u,v, rightGrid);
}
void draw_gridTip(int u, int v)
{
    const char* gridTip = "1111111111111111111111111111111111111111111111111411111111141411111114141411111414141411141411141414141111141414111111141";
    draw_img(u,v, gridTip);
}

//---------------------------------------------------------------------------------------------
//              Generic Color Blocks
//---------------------------------------------------------------------------------------------

void draw_lightBlue(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, LIGHTBLUE);
}
void draw_brown(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, DBROWN);
}

void draw_darkblueBlock(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, VDBLUE);
}

void draw_yellowBlock(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, YELLOW);
}
//-------------------------------------------------------------------------------------------------------------
//============================================================================== 
//                              Game Characters
//==============================================================================
void draw_lostSoul(int u, int v)
{
    const char* lostSoul = "553WWWWW355553W151W355553W515W355553W555W355333WWWWW333W333W5W333W3WWWW5WWWW33333W5W33335533W5W3355533WW5WW33553W3W5W3W35";
    draw_img(u,v, lostSoul);
}

void draw_npc(int u, int v)
{
    const char* npc = "111144411111114747411111144444111111PPWPP11111PPPWPPP111PPPPWPPPP11P1PPPPP1P1151PPPPP1115551P1P11115551P1P11111111P1P1111";
    draw_img(u,v, npc);
}

void draw_muses(int u, int v)
{
    const char* muse = "11114441111111474741111114444411111199W9911111999W9991119999W999911919999919115199999111555191911115551919111111119191111";
    draw_img(u,v, muse);
}
//Change
void draw_hermes(int u, int v)
{
    
    const char* hermes = "11114441111111474741111114444411111199W9911111999W9991119999W999911919999919115199999111555191911115551919111111119191111";
    draw_img(u,v, hermes);
}


//--------------------
//|   TREAUSRE    |
//--------------------
void draw_treasure(int u, int v)
{
    //const char* treasure = "11114441111111474741111114444411111199W9911111999W9991119999W999911919999919115199999111555191911115551919111111119191111";
    //draw_img(u,v, treasure);
    uLCD.filled_rectangle(u, v, u+11, v+11, RED);
}

//--------------------
//|   God Butcher    |
//--------------------
void draw_godButcher (int u, int v) 
{
    const char* godButcher = "YYYOOWOOYYYYYYOW9WOYYYYYYOW9WOYYYYYYOW9WOYYYYYYOW9WOYYYYYYOW9WOYYYYYYOW9WOYYYYOOOW9WOOOYYOWWWWWWWOYYOOOW9WOOOYYYYOWWWOYYY";
    draw_img(u,v, godButcher);
}

//--------------------
//|  Trailing Clouds |
//--------------------
void draw_trailingClouds(int u, int v)
{
    const char* trailingCloud = "WWWSSSSSSWSWWWSSSSSWWWWWWSSSSWWWWSSSSWSSSSSSSSSWWWSSSSSSSWWWWWSSSSSWWWWWWSSSSSSSSSSSSSSSSSSSSSWWSSSSSSSSWWWWSSSSSSWWWWWWS";
    draw_img(u,v, trailingCloud);
}

//******************************************************************************

/*============================================================================
                        Status Bars: (Upper and Lower)
   ===========================================================================
   Upper Status Bar Displays:      Pos: ([X-Coordinate], [Y-Coordinate])  Map:[active_map]
   Lower Status Bar Displays:   Lives: [#of lives] 
   ^ eventually will display Chrome Hearts  as an indicator of the number of 
    lives the Player has left
   */

// The valye for map index is retrieved from calling get_map_index, which is accesible in main.cpp + map.cpp
void draw_upper_status(int x, int y, int map_index)
{
    // Draw bottom border of status bar
    uLCD.line(0, 9, 127, 9, GREEN);
    
    // Add other status info drawing code here
    uLCD.color(WHITE);
    uLCD.text_width(1);
    uLCD.text_height(1);
    uLCD.textbackground_color(BLACK);
    /* Weird Formaatting for the Upper Status Bar:
    ----------------------------------
    Previous Issues: 
        -When the Player's X-postion reached greater than 10, and then went back
        to single digits, e.g. from X = 10 -> 9. The 0 from the previous X = 10
        coordinate value would stay, e.g. continue from 10 -> 1.
        The X-values would be displayed as 10->90->80->70-> ... -> 10
        when it should be 10->9->8->7-> ...->1.
    Fix: 
        -The following If statement allows for the lingering "0" to be overwritten
    by the ",".
    Previous Issues:
        -Similar issue, there would be lingering ")" when going from double digits
        to single digits, or when X-Coordinated went from being a double digit
        to a single digit.       
    Fix: 
        -added spaces to overwrite the lingering ")"
    */
    if (x < 10){
        uLCD.locate(1,0);
        uLCD.printf("Pos: (%d",x); 
        uLCD.color(WHITE);
        uLCD.locate(8,0);
        uLCD.printf(",%d)  ",y);
        uLCD.color(WHITE);
        uLCD.locate(12,0);
        uLCD.printf("Map:%d ", map_index);   
    } else {
        uLCD.locate(1,0);
        uLCD.printf("Pos: (%d",x);
        uLCD.color(WHITE);
        uLCD.locate(9,0);
        uLCD.printf(",%d)  ",y);
        uLCD.color(WHITE);
        uLCD.locate(13,0);
        uLCD.printf("Map:%d", map_index); 
    }
    
}
void draw_lower_status(int lives)
{
    // Draw top border of status bar
    //uLCD.line(0, 118, 127, 118, GREEN);
    // Add other status info drawing code here
    uLCD.text_width(1);
    uLCD.text_height(1);
    uLCD.textbackground_color(BLACK);
    uLCD.line(0, 118, 127, 118, GREEN);
    uLCD.locate(0,15);
    uLCD.printf("Lives: %d",lives);
}
//=============================================================================

//---------------------------
//|     Draw Game Border    |
//---------------------------
void draw_border()
{
    /*
    uLCD.filled_rectangle(0,     9, 127,  14, WHITE); // Top
    uLCD.filled_rectangle(0,    13,   2, 114, WHITE); // Left
    uLCD.filled_rectangle(0,   114, 127, 117, WHITE); // Bottom
    uLCD.filled_rectangle(124,  14, 127, 117, WHITE); // Right
    */
    uLCD.filled_rectangle(0,     9, 127,  14, LGRAY); // Top
    uLCD.filled_rectangle(0,    13,   2, 114, LGRAY); // Left
    uLCD.filled_rectangle(0,   114, 127, 117, LGRAY); // Bottom
    uLCD.filled_rectangle(124,  14, 127, 117, LGRAY); // Right
}



static int tumblr_mfdoom_data[50*50] = 
{
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x92a6d6, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x92a6d6, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x92a6d6, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0c0c0c, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x92a6d6, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x92a6d6, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x92a6d6, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x92a6d6, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 0x0043e1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x666666, 0x666666, 0x5c5c5c, 0x080808, 0x424242, 0x666666, 0x666666, 0x666666, 0x666666, 0x666666, 0x666666, 0xcbcbcb, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xcfcfd1, 0xc9ccd2, 0xc9ccd2, 0xc9ccd2, 0xc9ccd2, 0xc9ccd2, 0xc9ccd2, 0xc9ccd2, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x9e9e9e, 0x9e9e9e, 0x9e9e9e, 0x505050, 0x474747, 0x2f2f2f, 0x000000, 0x212121, 0x3f3f3f, 0x505050, 0x383838, 0x353535, 0x353535, 0x353535, 0x989898, 0x9e9e9e, 0x9e9e9e, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xcecece, 0xc0c0c0, 0x5c5c5c, 0x5c5c5c, 0x5c5c5c, 0x323232, 0x212121, 0x000000, 0x000000, 0x000000, 0x131313, 0x323232, 0x0d0d0d, 0x090909, 0x090909, 0x0f0f0f, 0x4f4f4f, 0x535353, 0x535353, 0xc0c0c0, 0xc0c0c0, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xbbbbbb, 0x636363, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x353535, 0x3b3b3b, 0x3b3b3b, 0x616161, 0x060606, 0x010101, 0x010101, 0x636363, 0x636363, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x7f7f7f, 0x747474, 0x454545, 0x585858, 0x585858, 0x585858, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x353535, 0x3b3b3b, 0x3b3b3b, 0x454545, 0x2d2d2d, 0x2c2c2c, 0x484848, 0x1a1a1a, 0x1a1a1a, 0x7f7f7f, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xc7c7c7, 0xa3a3a3, 0x626262, 0x5c5c5c, 0x434343, 0x6e6e6e, 0x6e6e6e, 0x6e6e6e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x050505, 0x0c0c0c, 0x3e3e3e, 0x4b4b4b, 0x4f4f4f, 0x4f4f4f, 0x4f4f4f, 0x4f4f4f, 0x848484, 0x212121, 0x212121, 0x4c4c4c, 0xb8b8b8, 0xbfbfbf, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xa3a3a3, 0x000000, 0x626262, 0x626262, 0x626262, 0x999999, 0x999999, 0x999999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x161616, 0x3b3b3b, 0x5e5e5e, 0x868686, 0x999999, 0x999999, 0x999999, 0x999999, 0xffffff, 0x999999, 0x999999, 0x000000, 0x626262, 0x7f7f7f, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x7f7f7f, 0x4c4c4c, 0x000000, 0x000000, 0x313131, 0xffffff, 0xffffff, 0xf9f9f9, 0x999999, 0x999999, 0x656565, 0x000000, 0x000000, 0x000000, 0x252525, 0x626262, 0x939393, 0x999999, 0x999999, 0xffffff, 0x464646, 0x3b3b3b, 0x3b3b3b, 0x000000, 0x000000, 0x000000, 0x3b3b3b, 0x626262, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x878787, 0x545454, 0x000000, 0x000000, 0x272727, 0xcdcdcd, 0xd9d9d9, 0xd4d4d4, 0x868686, 0x999999, 0x656565, 0x020202, 0x131313, 0x070707, 0x252525, 0x626262, 0x838383, 0x868686, 0x868686, 0xffffff, 0x6b6b6b, 0x616161, 0x3b3b3b, 0x0b0b0b, 0x0b0b0b, 0x000000, 0x3b3b3b, 0x575757, 0xa8a8a8, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xa8a8a8, 0x777777, 0x000000, 0x000000, 0x000000, 0x000000, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x999999, 0x656565, 0x0a0a0a, 0x626262, 0x252525, 0x252525, 0x626262, 0x3f3f3f, 0x3b3b3b, 0x3b3b3b, 0xffffff, 0xffffff, 0xffffff, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x000000, 0x3b3b3b, 0x2c2c2c, 0x040404, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xa8a8a8, 0x777777, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x3b3b3b, 0x484848, 0x585858, 0x000000, 0x3d3d3d, 0x535353, 0x3b3b3b, 0xebebeb, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x999999, 0x3b3b3b, 0x2c2c2c, 0x040404, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd0d0d0, 0xc8c8c8, 0xa5a5a5, 0x797979, 0x090909, 0xf0f0f0, 0xf2f2f2, 0xf9f9f9, 0xf9f9f9, 0xf9f9f9, 0xf9f9f9, 0x464646, 0x4f4f4f, 0x575757, 0x060606, 0x3f3f3f, 0x585858, 0x464646, 0xececec, 0xfbfbfb, 0xf9f9f9, 0xf6f6f6, 0xf6f6f6, 0xf6f6f6, 0xf6f6f6, 0xf6f6f6, 0xf6f6f6, 0x999999, 0x3b3b3b, 0x2e2e2e, 0x0d0d0d, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xbababa, 0x3c3c3c, 0x808080, 0x999999, 0x999999, 0x000000, 0x1e1e1e, 0x999999, 0x999999, 0x999999, 0x999999, 0xffffff, 0xbcbcbc, 0x3f3f3f, 0x626262, 0x626262, 0x9d9d9d, 0xffffff, 0xffffff, 0xbcbcbc, 0x999999, 0x626262, 0x626262, 0x626262, 0x626262, 0x626262, 0x626262, 0x999999, 0x3b3b3b, 0x545454, 0x9a9a9a, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xbababa, 0x3c3c3c, 0x808080, 0x777777, 0x000000, 0x3b3b3b, 0x2f2f2f, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x575757, 0xebebeb, 0x3b3b3b, 0xb5b5b5, 0xb5b5b5, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x999999, 0x717171, 0x040404, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xb7b7b7, 0x282828, 0x959595, 0xa6a6a6, 0x575757, 0x272727, 0x1f1f1f, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x393939, 0xa4a4a4, 0x7e7e7e, 0xcecece, 0xadadad, 0x272727, 0x272727, 0x272727, 0x272727, 0x272727, 0x272727, 0x272727, 0x272727, 0x272727, 0x272727, 0x272727, 0x868686, 0x636363, 0x040404, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xb2b2b2, 0x070707, 0xababab, 0xebebeb, 0xffffff, 0x000000, 0x000000, 0x000000, 0x030303, 0x030303, 0x000000, 0x000000, 0x000000, 0x1a1a1a, 0xffffff, 0xffffff, 0x9e9e9e, 0x000000, 0x030303, 0x010101, 0x000000, 0x030303, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x626262, 0x4b4b4b, 0x0e0e0e, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xbababa, 0x3c3c3c, 0x0f0f0f, 0x373737, 0xffffff, 0x000000, 0x000000, 0x000000, 0x202020, 0x1e1e1e, 0x000000, 0x000000, 0x000000, 0x1a1a1a, 0xffffff, 0xffffff, 0x9e9e9e, 0x000000, 0x1d1d1d, 0x0b0b0b, 0x000000, 0x202020, 0x020202, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x626262, 0x626262, 0x646464, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xbababa, 0x3c3c3c, 0x0f0f0f, 0x2a2a2a, 0xc0c0c0, 0x000000, 0x000000, 0x000000, 0x0c0c0c, 0x0b0b0b, 0x000000, 0x000000, 0x000000, 0x1a1a1a, 0xffffff, 0xffffff, 0x9e9e9e, 0x000000, 0x0b0b0b, 0x040404, 0x000000, 0x0c0c0c, 0x010101, 0x000000, 0x000000, 0x9e9e9e, 0x9e9e9e, 0x000000, 0x848484, 0x848484, 0x868686, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xbababa, 0x3c3c3c, 0x2b2b2b, 0x313131, 0x5f5f5f, 0x616161, 0x4e4e4e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x141414, 0x4e4e4e, 0xffffff, 0xffffff, 0xb4b4b4, 0x3a3a3a, 0x060606, 0x000000, 0x000000, 0x000000, 0x5b5b5b, 0x616161, 0x616161, 0x9e9e9e, 0x9e9e9e, 0x3a3a3a, 0x999999, 0x999999, 0x9a9a9a, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xbababa, 0x3c3c3c, 0x585858, 0x4c4c4c, 0x000000, 0xffffff, 0xcdcdcd, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x343434, 0xa3a3a3, 0xffffff, 0xffffff, 0xd8d8d8, 0x999999, 0x101010, 0x000000, 0x000000, 0x000000, 0xf0f0f0, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x999999, 0x999999, 0x999999, 0x9a9a9a, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xbababa, 0x3c3c3c, 0x171717, 0x252525, 0x898989, 0x1a1a1a, 0x414141, 0xe5e5e5, 0xe5e5e5, 0xe5e5e5, 0xe5e5e5, 0x898989, 0xaeaeae, 0xf6f6f6, 0xffffff, 0xffffff, 0xfbfbfb, 0xf5f5f5, 0x949494, 0xc6c6c6, 0xe5e5e5, 0xe5e5e5, 0x262626, 0x1a1a1a, 0x1a1a1a, 0x898989, 0x898989, 0x999999, 0x999999, 0x999999, 0x9a9a9a, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xbababa, 0x3c3c3c, 0x0f0f0f, 0x212121, 0x999999, 0x656565, 0x626262, 0x575757, 0x575757, 0x5a5a5a, 0x979797, 0x999999, 0xbcbcbc, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa3a3a3, 0x989898, 0x979797, 0x575757, 0x646464, 0x656565, 0x656565, 0x999999, 0x999999, 0x999999, 0x999999, 0xa3a3a3, 0xbebebe, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xbababa, 0x3c3c3c, 0x0f0f0f, 0x212121, 0x999999, 0x999999, 0x7b7b7b, 0x000000, 0x000000, 0x060606, 0x626262, 0x999999, 0xbcbcbc, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa3a3a3, 0x757575, 0x626262, 0x000000, 0x909090, 0x999999, 0x999999, 0x999999, 0x999999, 0x999999, 0x999999, 0xa8a8a8, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x373737, 0x000000, 0x000000, 0x999999, 0x999999, 0x999999, 0x999999, 0x939393, 0x3b3b3b, 0x999999, 0xbcbcbc, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa3a3a3, 0x757575, 0x626262, 0x999999, 0x999999, 0x999999, 0x999999, 0x999999, 0x999999, 0x626262, 0x000000, 0x373737, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xc8c8c8, 0x999999, 0x000000, 0x999999, 0x999999, 0x999999, 0x414141, 0x404040, 0x3b3b3b, 0x656565, 0x484848, 0x272727, 0xffffff, 0xffffff, 0xa4a4a4, 0x0f0f0f, 0x5c5c5c, 0x4b4b4b, 0x3d3d3d, 0x656565, 0x969696, 0x999999, 0x999999, 0x414141, 0x414141, 0x060606, 0xc5c5c5, 0xc8c8c8, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xa3a3a3, 0x000000, 0x999999, 0x999999, 0x999999, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x626262, 0x414141, 0x1a1a1a, 0xffffff, 0xffffff, 0x9e9e9e, 0x000000, 0x585858, 0x484848, 0x3b3b3b, 0x626262, 0x969696, 0x999999, 0x999999, 0x3b3b3b, 0x3b3b3b, 0x000000, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x000000, 0x0b0b0b, 0x3b3b3b, 0x000000, 0x030303, 0x3b3b3b, 0x3b3b3b, 0x272727, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x585858, 0x484848, 0x3b3b3b, 0x626262, 0x969696, 0x999999, 0x3b3b3b, 0x000000, 0x000000, 0x000000, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x000000, 0x000000, 0x000000, 0x000000, 0x030303, 0x3b3b3b, 0x3b3b3b, 0x484848, 0x585858, 0x000000, 0x000000, 0x252525, 0x626262, 0x3f3f3f, 0x3b3b3b, 0x3b3b3b, 0x626262, 0x626262, 0x626262, 0x000000, 0x000000, 0x000000, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x000000, 0x000000, 0x000000, 0x000000, 0x030303, 0x3b3b3b, 0x3b3b3b, 0x484848, 0x585858, 0x000000, 0x000000, 0x252525, 0x626262, 0x3f3f3f, 0x3b3b3b, 0x3b3b3b, 0x626262, 0x626262, 0x626262, 0x000000, 0x000000, 0x000000, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xa8a8a8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x141414, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x3b3b3b, 0x060606, 0x000000, 0x000000, 0x626262, 0x626262, 0x626262, 0x000000, 0x000000, 0x000000, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xa8a8a8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x626262, 0x626262, 0x626262, 0x000000, 0x000000, 0x000000, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xa8a8a8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x626262, 0x585858, 0x585858, 0x000000, 0x000000, 0x000000, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xa8a8a8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x010101, 0x010101, 0x626262, 0x3c3c3c, 0x3a3a3a, 0x000000, 0x000000, 0x000000, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xa8a8a8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x272727, 0x3b3b3b, 0x626262, 0x060606, 0x000000, 0x000000, 0x000000, 0x000000, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x606060, 0x4d4d4d, 0x000000, 0x000000, 0x000000, 0x000000, 0x202020, 0x151515, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x272727, 0x3b3b3b, 0x626262, 0x060606, 0x000000, 0x000000, 0x000000, 0x000000, 0x606060, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xa3a3a3, 0x929292, 0x929292, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3b3b3b, 0x272727, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x272727, 0x3b3b3b, 0x565656, 0x050505, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x929292, 0x929292, 0x939393, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x373737, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3b3b3b, 0x272727, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x272727, 0x3b3b3b, 0x3b3b3b, 0x030303, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x040404, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x2c2c2c, 0x262626, 0x262626, 0x262626, 0x0a0a0a, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3b3b3b, 0x272727, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x070707, 0x0b0b0b, 0x0b0b0b, 0x010101, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x020202, 0x565656, 0x3c3c3c, 0x343434, 0x565656, 0xbbbbbb, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x585858, 0x585858, 0x585858, 0x585858, 0x030303, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x191919, 0x101010, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x010101, 0x3b3b3b, 0x1b1b1b, 0x121212, 0x3b3b3b, 0x535353, 0x585858, 0x585858, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x010101, 0x3b3b3b, 0x1b1b1b, 0x121212, 0x3b3b3b, 0x0b0b0b, 0x000000, 0x000000, 0xd1d1d1, 0xd1d1d1, 0xd1d1d1, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0f0f0f, 0x3a3a3a, 0x000000, 0x202020, 0x292929, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x333333, 0x282828, 0x090909, 0x333333, 0x1c1c1c, 0x060606, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3b3b3b, 0x2c2c2c, 0x010101, 0x3b3b3b, 0x1b1b1b, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};



void draw_basq(int u, int v)
{
    //int *MFDOOM = tumblr_mfdoom_data;//tumblr_mfdoom_data[16384]
    uLCD.BLIT(u, v, 50, 50, tumblr_mfdoom_data);
    wait_us(250); // Recovery time!
}
